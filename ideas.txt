
Here's just some ideas for features for the future.  (Yes, as I freely
admit, I'm one of the worst perpetrators of feeping creaturism for
proftpd.)

Events API
  + Use an event-driven model for triggering registered callbacks.  These
    callbacks can be defined and registered by third-party modules.

    For example, in a module, you could register a callback for a certain
    named event using a function like:

      pr_event_register(const char *event, void (*cb)(const void *, void *),
        void *userdata);

    Then, in the core engine, an event would be generated by:

      pr_event_generate(const char *event, const void *event_data);

    This event_data pointer, and the userdata pointer provided when a callback
    is registered, would be passed to all callbacks registered for the given
    event.

    Using this Events API, I could replace a couple of existing registrations,
    such as for shutdown, rehashes, postparse, etc, and rewrite them using
    events like:

      core.exit
      core.postparse
      core.preparse
      core.restart
      core.shutdown
      core.startup

    Other notable events in which modules might be interested could be:

      core.max-instances
      core.max-connect-rate

    Or, in mod_auth's handling of the MaxClients et al directives:

      mod_auth.max-clients
      mod_auth.max-clients-per-user

    Such an API makes it quite easy to register callbacks for as-yet-undefined
    events: the event name need only be added in the future, but the
    API need not change.

mod_conf_ldap
  + module for reading/constructing proftpd.conf information from LDAP
    (LDAP version of mod_conf_sql)

mod_search
  + implements a SITE SEARCH command, for using nftw(3), globs and regexs
    for scanning a site for a given filename pattern

mod_vscan
  + scan for viruses on incoming and outgoing files

mod_magic
  + use libmagic for identifying a given file type (a la file(1))

mod_auth_ntlm
  + authenticating against a Windows box

mod_snmp
  + expose an interface for SNMP monitoring of the server status
  + generate traps based on certain events?  Requires Events API (see above)

mod_slp
  + see www.openslp.org

EBCDIC support
